Lab 6 - Pagenation
	Stream<T> skip(long n) 
	Stream<T>	limit(long maxSize)
	100 records, show 1..10 and then accept N or P from user
--------------------------------------------
Lab 5- 
// TODO Auto-generated method stub
		List<Emp> list = EmpManager.getList(20);
		Optional<Emp> empop = list.stream().findAny();
		System.out.println(empop.get());
		System.out.println("\n\n");
    	empop=	 list.stream()
			.peek(e->System.out.println("before filter " + e))
			.filter((e)->e.getProject().equals("proj1"))
			.findAny();
		System.out.println("proj1 findany " +  empop.get());
		System.out.println("\n\n");
	    		boolean ans = list.stream()
				.peek(e->System.out.println("before filter " + e))
				.anyMatch((e)->e.getEname().equals("Vaishali") && e.getDept().equals("Sales"));
		System.out.println("Vaishali in FIn department is available : " + ans);
	}
--------------------------------------------
Lab 4 

import java.util.Comparator;
import java.util.List;

public class Lab4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Emp> list = EmpManager.getList(10);
		   System.out.println("########## 1. Show All records ############");
		   list.forEach(System.out::println);
		//   list.stream().forEach(System.out::println);
		   System.out.println("######### 2. Sorted - based on Ename  ##########");
		   Comparator<Emp> salarycomp = (x,y)->Double.compare(x.getSalary(), y.getSalary());
		    list.stream().sorted(salarycomp).forEach(System.out::println);
		
		   System.out.println("######### 2. Sorted - based on Salary ##########");
		   list.stream().sorted((x,y)->x.getEname().compareToIgnoreCase(y.getEname())).forEach(System.out::println);
		
		
		    System.out.println("######### 3. Show Emp with  Min Salary ##########");
		
		    System.out.println("######### 4. Show Emp with Project 'proj1' having Min Salary ##########");
		
		    System.out.println("######### 5. Show Emp with department as 'IT' and project as 'proj2' ##########");
		    System.out.println("#########6. Number of employees in 'L&D' department ##########");
	}
}

-----------------------
Lab 3 - create a list of integers (fill 10 integers (random/static)
	1. Show numbers
	2. Sorted
	3. Min
	4. Max
	5. Show all where number > 50
	6. Show all where number is between 10 and 50 (2 filters)
	7. Show all where number is between 10 and 50 (1 filters as and condition)
----------------------------
Lab2 - import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class Lab2 {

	public static void main(String[] args) {
		List<String> names = Arrays.asList("Anita", "Vaishali", "Sonali", "Simran", "Vishal", "Aman", "shree", "Dyna");
		names.stream().forEach(System.out::println);
		System.out.println("-----------------Names ending with li----------------");
		names.stream().filter((str) -> str.endsWith("li")).forEach(System.out::println);
		System.out.println("-----------------Names starts with S----------------");
		names.stream().filter((str) -> str.startsWith("S")).forEach(System.out::println);
		System.out.println("--------------------Sorted Output for name contains sh---------------------------");
		names.stream().filter(s->s.contains("sh")).sorted().forEach(System.out::println);
	}
}
--------------
Lab1 - in demo7
  Write code to create stream, check multiple access to same stream
  Stream<String> strstream = Stream.of("Anita","Vaishali","Sonali", "Simran","Vishal","Aman","Shree","Dyna");
		strstream.forEach(System.out::println);
		System.out.println("----------------");
	  strstream.forEach(System.out::println);
   Line number 6 will give error, observe that error and then modify code to 
    declare list 
      List<String> names=Arrays.asList("Anita","Vaishali","Sonali", "Simran","Vishal","Aman","Shree","Dyna");
		and get stream from list
      names.stream().foreach
    invoke multiple times
    
      
