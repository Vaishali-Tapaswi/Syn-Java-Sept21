Lab 4 - 
import java.util.ArrayList;
import java.util.List;

class Dept{
	private int deptno;
	private String dname;
	private String loc;
	public int getDeptno() {
		return deptno;
	}
	public void setDeptno(int deptno) {
		this.deptno = deptno;
	}
	public String getDname() {
		return dname;
	}
	public void setDname(String dname) {
		this.dname = dname;
	}
	public String getLoc() {
		return loc;
	}
	public void setLoc(String loc) {
		this.loc = loc;
	}
	@Override
	public String toString() {
		return "Dept [deptno=" + deptno + ", dname=" + dname + ", loc=" + loc + "]";
	}
}
@FunctionalInterface
interface DeptDelete{
	boolean deleteif(Dept d);
}
class DeptDAO{
	// CRUD operations
	List<Dept> list = new ArrayList<Dept>();
	public void add(Dept d ) {
		list.add(d);
	}
	public List<Dept> list(){return list;}
	
	public void delete(DeptDelete deletelogic) { 
		for (Dept dept : list) {
			if (deletelogic.deleteif(dept))
				{
				list.remove(dept);
				break;
				}
		}
		}
}

public class Lab4 {
public static void main(String[] args) {
	DeptDAO dao = new DeptDAO();
	for (int i = 10;i< 100;i+=10)
	{
			Dept d= new Dept();
			d.setDeptno(i);
			d.setDname("Dnameof"+i);
			if ( (i%20)==0)
					d.setLoc("Hyd");
			else
					d.setLoc("Pune");
			dao.add(d);
	}
	dao.list().forEach(System.out::println);
    DeptDelete deletebydeptno = 	(d)->d.getDeptno()==20;
	dao.delete(deletebydeptno); 
	DeptDelete deletebydname = (d)->d.getDname().equals("Dnameof50");
	dao.delete(deletebydname); 
	dao.delete((d)->d.getLoc().equals("Hyd"));
	System.out.println("-----------------List after deletion--------------------");
	dao.list().forEach(System.out::println);
	
}
}

------------------------
Lab 3 - Write/Design interface as Calc which should offer 4 operations like +,-,*,/
-------------------------
Lab 2 - 
	interface Process{
		int add(int no1, int no2);
	}

	public class Lab2 {

		public static void main(String[] args) {
			Process processImpl1 =   (int no1, int no2)  -> {
				return no1+no2;
			};
			Process processImpl2 =   (i, j)  ->  i+j;
			System.out.println(" add(100, 200) returned " + processImpl1.add(100, 200));
			System.out.println(" add(1000, 200) returned " + processImpl2.add(100, 200));
		}
	}

	Try writing one more methdo in Process -> check exception -> delete method
	add @functionalinteface annotation to Process interface -> compile , run 
	Try writing one more methdo in Process -> check exception -> 
-------------------------
Lab 1 - Create Java project called Demo1
    -> confirm compilation 1.8
  Write Lab1.java
    class Lab1Helper implements Runnable{
      @Override
      public void run() {
        System.out.println("run of Lab1Helper invoked");
      }
    }*/
    public class Lab1 {

      public static void main(String[] args) {
      	Runnable r1 = new Lab1Helper();
        Thread t1 = new Thread(r1);
        t1.start();
      }
    }
    
  Change runnable code to  Runnable r1 =  () -> 	System.out.println("run of Lab1Helper invoked");
  Delete Lab1Helper ...
  Test
  
